{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","src","alt","CardList","cardArray","robots","map","user","i","key","Scroll","style","overflowY","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","res","json","users","filterRobot","this","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAiBeA,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,OACd,2BACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCOAK,EAfF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACC,kBAAC,WAAD,KACC,yBAAKR,UAAU,oDACd,yBAAKS,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,SACpD,6BACC,4BAAKJ,GACL,2BAAIC,OCAMI,EAPE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACMC,KAAI,SAACC,EAAMC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIO,EAAKP,GAAIF,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAEhE,OAAO,kBAAC,WAAD,KAAWK,ICGJM,EARA,SAACb,GACf,OACC,kBAAC,WAAD,KACC,yBAAKc,MAAO,CAAEC,UAAW,SAAUC,OAAQ,SAAWhB,EAAMiB,YC0ChDC,G,kBAxCd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACZjB,OAAQ,GACRc,YAAa,IAJD,E,iFAQO,IAAD,OACnBI,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQF,MAAK,SAACG,GACnF,EAAKT,SAAS,CAAEb,OAAQsB,S,+BAQhB,IAAD,OACFC,EAAcC,KAAKP,MAAMjB,OAAOyB,QAAO,SAACC,GAC7C,OAAOA,EAAMjC,KAAKkC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEjE,OAAKH,KAAKP,MAAMjB,OAAO6B,OAIrB,kBAAC,WAAD,KACC,yBAAK1C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWD,aAAcsC,KAAKb,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUX,OAAQuB,OARf,wBAAIpC,UAAU,MAAd,e,GAxBQ2C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.933b15ed.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"pa2\">\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\t\ttype=\"search\"\n\t\t\t\t\tplaceholder=\"search robots\"\n\t\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default SearchBox;\n","import React, { Fragment } from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id } = props;\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"robo\" />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Card;\n","import React, { Fragment } from 'react';\nimport Card from '../components/Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardArray = robots.map((user, i) => {\n\t\treturn <Card key={i} id={user.id} name={user.name} email={user.email} />;\n\t});\n\treturn <Fragment>{cardArray}</Fragment>;\n};\n\nexport default CardList;\n","import React, { Fragment } from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div style={{ overflowY: 'scroll', height: '80vh' }}>{props.children}</div>\n\t\t</Fragment>\n\t);\n};\n\nexport default Scroll;\n","import React, { Fragment, Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then((res) => res.json()).then((users) => {\n\t\t\tthis.setState({ robots: users });\n\t\t});\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\trender() {\n\t\tconst filterRobot = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n\t\t});\n\t\tif (!this.state.robots.length) {\n\t\t\treturn <h1 className=\"tc\">Loading</h1>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t\t<h1 className=\"f1\">Robo Friends</h1>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList robots={filterRobot} />\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}